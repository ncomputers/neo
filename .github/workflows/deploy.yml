name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  KUBE_CONFIG_STAGING: ${{ secrets.KUBE_CONFIG_STAGING }}
  KUBE_CONFIG_PROD: ${{ secrets.KUBE_CONFIG_PROD }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      KUBE_CONFIG_STAGING: ${{ secrets.KUBE_CONFIG_STAGING }}
      KUBE_CONFIG_PROD: ${{ secrets.KUBE_CONFIG_PROD }}
    steps:
      - uses: actions/checkout@v3
      - name: Push to deploy branch
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git push origin HEAD:deploy --force

  deploy-staging:
    needs: build-and-push
    if: ${{ secrets.KUBE_CONFIG_STAGING != '' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false) }}
    runs-on: ubuntu-latest
    environment: staging
    env:
      KUBE_CONFIG_STAGING: ${{ secrets.KUBE_CONFIG_STAGING }}
      KUBE_CONFIG_PROD: ${{ secrets.KUBE_CONFIG_PROD }}
    steps:
      - uses: actions/checkout@v3
      - name: Guard envs
        run: |
          if [ -z "${KUBE_CONFIG_STAGING}" ]; then
            echo "KUBE_CONFIG_STAGING is required" >&2
            exit 1
          fi
          echo "::add-mask::${KUBE_CONFIG_STAGING}"
          echo "::add-mask::${KUBE_CONFIG_PROD}"
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
      - name: Configure kubeconfig
        run: |
          set -euo pipefail
          mkdir -p ~/.kube
          if ! printf '%s' "$KUBE_CONFIG_STAGING" | base64 --decode > ~/.kube/config 2>/dev/null; then
            printf '%s' "$KUBE_CONFIG_STAGING" > ~/.kube/config
          fi
          chmod 600 ~/.kube/config
          echo "KUBECONFIG=$HOME/.kube/config" >> "$GITHUB_ENV"
      - name: Check kubectl context
        run: kubectl config current-context
      - name: Verify cluster access
        run: |
          set -e
          if [ -z "$KUBECONFIG" ] || [ ! -s "$KUBECONFIG" ]; then
            echo "kubeconfig missing or empty at $KUBECONFIG" >&2
            exit 1
          fi
          trap 'echo "--- kubectl config view ---"; kubectl config view; echo "--- kubectl config get-contexts ---"; kubectl config get-contexts' ERR
          kubectl config use-context "${{ secrets.KUBE_CTX_STAGING }}"
          kubectl version --short
          kubectl get ns
      - name: Deploy to staging
        run: |
          helm upgrade --install neo deploy/helm/neo \
            --namespace staging \
            --set image.tag=${{ github.sha }}
      - name: Scrub staging data
        run: python scripts/scrub_staging.py
      - name: Audit env examples
        run: python scripts/env_audit.py
      - name: Preflight health
        run: curl -fsS https://staging.example.com/api/admin/preflight
      - name: Smoke and canary tests
        run: |
          python scripts/smoke_release.py
          python scripts/canary_probe.py
      - name: Accessibility scan
        run: npx pa11y-ci
      - name: Playwright smoke
        run: |
          cd e2e/playwright
          npx playwright test --project=smoke

  manual-approval:
    needs: deploy-staging
    runs-on: ubuntu-latest
    env:
      KUBE_CONFIG_STAGING: ${{ secrets.KUBE_CONFIG_STAGING }}
      KUBE_CONFIG_PROD: ${{ secrets.KUBE_CONFIG_PROD }}
    environment: prod
    steps:
      - name: Awaiting approval
        run: echo "Manual approval required to deploy to production"

  deploy-prod:
    needs: manual-approval
    if: ${{ secrets.KUBE_CONFIG_PROD != '' && secrets.KUBE_CONFIG_STAGING != '' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false) }}
    runs-on: ubuntu-latest
    environment: prod
    env:
      KUBE_CONFIG_STAGING: ${{ secrets.KUBE_CONFIG_STAGING }}
      KUBE_CONFIG_PROD: ${{ secrets.KUBE_CONFIG_PROD }}
    steps:
      - uses: actions/checkout@v3
      - name: Guard envs
        run: |
          if [ -z "${KUBE_CONFIG_STAGING}" ] || [ -z "${KUBE_CONFIG_PROD}" ]; then
            echo "KUBE_CONFIG_STAGING and KUBE_CONFIG_PROD are required" >&2
            exit 1
          fi
          echo "::add-mask::${KUBE_CONFIG_STAGING}"
          echo "::add-mask::${KUBE_CONFIG_PROD}"
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
      - name: Configure kubeconfig
        run: |
          set -euo pipefail
          mkdir -p ~/.kube
          if ! printf '%s' "$KUBE_CONFIG_PROD" | base64 --decode > ~/.kube/config 2>/dev/null; then
            printf '%s' "$KUBE_CONFIG_PROD" > ~/.kube/config
          fi
          chmod 600 ~/.kube/config
          echo "KUBECONFIG=$HOME/.kube/config" >> "$GITHUB_ENV"
      - name: Check kubectl context
        run: kubectl config current-context
      - name: Verify cluster access
        run: |
          set -e
          if [ -z "$KUBECONFIG" ] || [ ! -s "$KUBECONFIG" ]; then
            echo "kubeconfig missing or empty at $KUBECONFIG" >&2
            exit 1
          fi
          trap 'echo "--- kubectl config view ---"; kubectl config view; echo "--- kubectl config get-contexts ---"; kubectl config get-contexts' ERR
          kubectl config use-context "${{ secrets.KUBE_CTX_PROD }}"
          kubectl version --short
          kubectl get ns
      - name: Blue/green rollout
        run: |
          helm upgrade --install neo deploy/helm/neo \
            --namespace prod \
            --set image.tag=${{ github.sha }} \
            --set strategy=bluegreen
      - name: Preflight health
        run: curl -fsS https://prod.example.com/api/admin/preflight
