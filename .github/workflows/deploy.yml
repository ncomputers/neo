name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Push to deploy branch
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git push origin HEAD:deploy --force

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
      - name: Configure kubeconfig
        run: |
          set -e
          if [ -z "${{ secrets.KUBE_CONFIG_STAGING }}" ]; then
            echo "KUBE_CONFIG_STAGING secret not found" >&2
            exit 1
          fi
          mkdir -p ~/.kube
          printf '%s' "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 --decode > ~/.kube/config 2>/dev/null \
            || printf '%s' "${{ secrets.KUBE_CONFIG_STAGING }}" > ~/.kube/config
          chmod 600 ~/.kube/config
          echo "KUBECONFIG=$HOME/.kube/config" >> "$GITHUB_ENV"
      - name: Verify cluster access
        run: |
          set -e
          if [ -z "$KUBECONFIG" ] || [ ! -s "$KUBECONFIG" ]; then
            echo "kubeconfig missing or empty at $KUBECONFIG" >&2
            exit 1
          fi
          trap 'echo "--- kubectl config view ---"; kubectl config view; echo "--- kubectl config get-contexts ---"; kubectl config get-contexts' ERR
          kubectl config use-context "${{ secrets.KUBE_CTX_STAGING }}"
          kubectl version --short
          kubectl get ns
      - name: Deploy to staging
        run: |
          helm upgrade --install neo deploy/helm/neo \
            --namespace staging \
            --set image.tag=${{ github.sha }}
      - name: Scrub staging data
        run: python scripts/scrub_staging.py
      - name: Audit env examples
        run: python scripts/env_audit.py
      - name: Preflight health
        run: curl -fsS https://staging.example.com/api/admin/preflight
      - name: Smoke and canary tests
        run: |
          python scripts/smoke_release.py
          python scripts/canary_probe.py
      - name: Accessibility scan
        run: npx pa11y-ci
      - name: Playwright smoke
        run: |
          cd e2e/playwright
          npx playwright test --project=smoke

  manual-approval:
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
      - name: Awaiting approval
        run: echo "Manual approval required to deploy to production"

  deploy-prod:
    needs: manual-approval
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
      - name: Configure kubeconfig
        run: |
          set -e
          if [ -z "${{ secrets.KUBE_CONFIG_PROD }}" ]; then
            echo "KUBE_CONFIG_PROD secret not found" >&2
            exit 1
          fi
          mkdir -p ~/.kube
          printf '%s' "${{ secrets.KUBE_CONFIG_PROD }}" | base64 --decode > ~/.kube/config 2>/dev/null \
            || printf '%s' "${{ secrets.KUBE_CONFIG_PROD }}" > ~/.kube/config
          chmod 600 ~/.kube/config
          echo "KUBECONFIG=$HOME/.kube/config" >> "$GITHUB_ENV"
      - name: Verify cluster access
        run: |
          set -e
          if [ -z "$KUBECONFIG" ] || [ ! -s "$KUBECONFIG" ]; then
            echo "kubeconfig missing or empty at $KUBECONFIG" >&2
            exit 1
          fi
          trap 'echo "--- kubectl config view ---"; kubectl config view; echo "--- kubectl config get-contexts ---"; kubectl config get-contexts' ERR
          kubectl config use-context "${{ secrets.KUBE_CTX_PROD }}"
          kubectl version --short
          kubectl get ns
      - name: Blue/green rollout
        run: |
          helm upgrade --install neo deploy/helm/neo \
            --namespace prod \
            --set image.tag=${{ github.sha }} \
            --set strategy=bluegreen
      - name: Preflight health
        run: curl -fsS https://prod.example.com/api/admin/preflight
      - name: Smoke and canary tests
        run: |
          python scripts/smoke_release.py
          python scripts/canary_probe.py
      - name: Accessibility scan
        run: npx pa11y-ci
      - name: Playwright smoke
        run: |
          cd e2e/playwright
          npx playwright test --project=smoke
      - name: Rollback on failure
        if: failure()
        run: helm rollback neo
