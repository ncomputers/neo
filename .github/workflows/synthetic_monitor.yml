name: synthetic-monitor

on:
  schedule:
    - cron: '*/5 * * * *'
    - cron: '*/10 * * * *'
  workflow_dispatch:

jobs:
  staging:
    if: github.event_name == 'workflow_dispatch' || github.event.schedule == '*/5 * * * *'
    runs-on: ubuntu-latest
    env:
      API_BASE_URL: ${{ secrets.API_BASE_URL_STAGING }}
      SYN_TENANT_ID: ${{ secrets.SYN_TENANT_ID_STAGING }}
      SYN_TABLE_CODE: ${{ secrets.SYN_TABLE_CODE_STAGING }}
      AUTH_TOKEN: ${{ secrets.AUTH_TOKEN_STAGING }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: |
          python -m pip install --upgrade pip
          pip install -r api/requirements.txt
      - name: Debug (length only)
        run: |
          echo "API_BASE_URL length: ${#API_BASE_URL}"
          echo "SYN_TENANT_ID length: ${#SYN_TENANT_ID}"
          echo "SYN_TABLE_CODE length: ${#SYN_TABLE_CODE}"
          echo "AUTH_TOKEN length: ${#AUTH_TOKEN}"
      - name: Guard
        shell: bash
        run: |
          set -Eeuo pipefail
          missing=()
          [[ -z "${API_BASE_URL:-}" ]] && missing+=("API_BASE_URL")
          [[ -z "${SYN_TENANT_ID:-}" ]] && missing+=("SYN_TENANT_ID")
          [[ -z "${SYN_TABLE_CODE:-}" ]] && missing+=("SYN_TABLE_CODE")
          [[ -z "${AUTH_TOKEN:-}"    ]] && missing+=("AUTH_TOKEN")
          if (( ${#missing[@]} )); then
            echo "Missing required secrets: ${missing[*]}" >&2
            exit 1
          fi
      - name: Run synthetic monitor
        id: monitor
        continue-on-error: true
        env:
          SYN_MENU_ITEM_IDS: ${{ secrets.SYN_MENU_ITEM_IDS_STAGING }}
          SYN_UPI_VPA: ${{ secrets.SYN_UPI_VPA_STAGING }}
          PUSHGATEWAY: ${{ secrets.PUSHGATEWAY_STAGING }}
        run: |
          set -o pipefail
          python scripts/synthetic_order_monitor.py | tee metrics.json
      - name: Parse metrics
        id: metrics
        run: |
          set -Eeuo pipefail
          if [[ -s metrics.json ]]; then
            step_failed="$(jq -r '.step_failed // "unknown"' metrics.json)"
          else
            step_failed="unknown"
          fi
          echo "step_failed=$step_failed" >> "$GITHUB_OUTPUT"
      - name: Previous run conclusion
        id: prev
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -Eeuo pipefail
          prev="$(curl -fsSL -H \"Authorization: Bearer $GITHUB_TOKEN\" \
            \"$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/workflows/${{ github.workflow }}.yml/runs?per_page=2\" \
            | jq -r '.workflow_runs[1].conclusion // \"unknown\"')"
          echo "prev=$prev" >> "$GITHUB_OUTPUT"
      - name: Alert on two consecutive failures
        if: steps.monitor.outcome == 'failure' && steps.prev.outputs.prev == 'failure'
        env:
          WEBHOOK: ${{ secrets.SYN_ALERT_WEBHOOK }}
        run: |
          set -Eeuo pipefail
          if [[ -z "${WEBHOOK:-}" ]]; then
            echo "SYN_ALERT_WEBHOOK not set; skipping alert." >&2
            exit 0
          fi
          bash scripts/notify.sh "staging" "${{ steps.metrics.outputs.step_failed }}"
      - name: Upload artifacts
        if: steps.monitor.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: synthetic-artifacts
          path: synthetics
      - name: Fail job
        if: steps.monitor.outcome == 'failure'
        run: exit 1

  prod:
    if: >-
      (github.event_name == 'workflow_dispatch' || github.event.schedule == '*/10 * * * *') &&
      github.ref == 'refs/heads/main' &&
      !github.event.pull_request.head.repo.fork &&
      secrets.API_BASE_URL != '' &&
      secrets.SYN_TENANT_ID != '' &&
      secrets.SYN_TABLE_CODE != '' &&
      secrets.AUTH_TOKEN != '' &&
      secrets.SYN_ENABLED_PROD == 'true'
    runs-on: ubuntu-latest
    environment: prod
    env:
      API_BASE_URL: ${{ secrets.API_BASE_URL }}
      SYN_TENANT_ID: ${{ secrets.SYN_TENANT_ID }}
      SYN_TABLE_CODE: ${{ secrets.SYN_TABLE_CODE }}
      AUTH_TOKEN: ${{ secrets.AUTH_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Guard
        shell: bash
        run: |
          set -Eeuo pipefail
          secrets=(API_BASE_URL SYN_TENANT_ID SYN_TABLE_CODE AUTH_TOKEN)
          missing=()
          for var in "${secrets[@]}"; do
            val="${!var:-}"
            echo "::add-mask::$val"
            [[ -z "$val" ]] && missing+=("$var")
          done
          if (( ${#missing[@]} )); then
            echo "Missing required secrets: ${missing[*]}" >&2
            exit 1
          fi
      - name: Sanity check
        run: curl -fsS "$API_BASE_URL" >/dev/null
      - run: |
          python -m pip install --upgrade pip
          pip install -r api/requirements.txt
      - name: Run synthetic monitor
        id: monitor
        continue-on-error: true
        env:
          SYN_MENU_ITEM_IDS: ${{ secrets.SYN_MENU_ITEM_IDS_PROD }}
          SYN_UPI_VPA: ${{ secrets.SYN_UPI_VPA_PROD }}
          PUSHGATEWAY: ${{ secrets.PUSHGATEWAY_PROD }}
        run: |
          set -o pipefail
          python scripts/synthetic_order_monitor.py | tee metrics.json
      - name: Parse metrics
        id: metrics
        run: |
          set -Eeuo pipefail
          if [[ -s metrics.json ]]; then
            step_failed="$(jq -r '.step_failed // "unknown"' metrics.json)"
          else
            step_failed="unknown"
          fi
          echo "step_failed=$step_failed" >> "$GITHUB_OUTPUT"
      - name: Previous run conclusion
        id: prev
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -Eeuo pipefail
          prev="$(curl -fsSL -H \"Authorization: Bearer $GITHUB_TOKEN\" \
            \"$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/workflows/${{ github.workflow }}.yml/runs?per_page=2\" \
            | jq -r '.workflow_runs[1].conclusion // \"unknown\"')"
          echo "prev=$prev" >> "$GITHUB_OUTPUT"
      - name: Alert on two consecutive failures
        if: steps.monitor.outcome == 'failure' && steps.prev.outputs.prev == 'failure'
        env:
          WEBHOOK: ${{ secrets.SYN_ALERT_WEBHOOK }}
        run: |
          set -Eeuo pipefail
          if [[ -z "${WEBHOOK:-}" ]]; then
            echo "SYN_ALERT_WEBHOOK not set; skipping alert." >&2
            exit 0
          fi
          bash scripts/notify.sh "prod" "${{ steps.metrics.outputs.step_failed }}"
      - name: Upload artifacts
        if: steps.monitor.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: synthetic-artifacts
          path: synthetics
      - name: Fail job
        if: steps.monitor.outcome == 'failure'
        run: exit 1
